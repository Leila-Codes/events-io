package transform

type KeyedEvent[IN, KEY interface{}] {
    Key Key
    Value IN
}

type KeyFunc[IN, KEY interface{}] func(item IN) KEY

func[IN, KEY interface{}] KeyBy(input chan IN, keyer KeyFunc[IN, KEY]) chan KeyedEvent[IN, KEY] {
    
    out := make(chan KeyedEvent[IN, KEY], 1_000)

    go keyByThread(input, keyer, out)
}

func [IN, KEY interface{}] keyByThread(input chan IN, keyer KeyFunc[IN, KEY], out chan KeyedEvent[IN, KEY]) {
    for {
         out <- keyer(<- input)
    }
}