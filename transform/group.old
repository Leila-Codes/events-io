package transform

type Addressable interface {
	Key() interface{}
	Value() interface{}
}

type StateStore map[interface{}]interface{}

type groupFunction[IN interface{}, OUT interface{}] func(in IN, state StateStore) *OUT

func GroupBy[IN, OUT interface{}](in chan IN, grouper groupFunction[IN, OUT], out chan OUT) {
	for {
		data := grouper[IN, OUT](<-in, state)
		if data != nil {
			out <- *data
		}
	}
}
